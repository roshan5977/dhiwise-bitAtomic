import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.primary.withOpacity(1),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: colorScheme.primary.withOpacity(1),
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(27.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          disabledBackgroundColor: appTheme.gray60002,
          backgroundColor: appTheme.gray60002,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(25.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: colorScheme.primary.withOpacity(1),
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.whiteA70002,
          fontSize: 17.fSize,
          fontFamily: 'Kameron',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.whiteA70002,
          fontSize: 14.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.whiteA70002,
          fontSize: 12.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w400,
        ),
        displaySmall: TextStyle(
          color: appTheme.whiteA70002,
          fontSize: 36.fSize,
          fontFamily: 'Kameron',
          fontWeight: FontWeight.w400,
        ),
        headlineMedium: TextStyle(
          color: appTheme.whiteA70002,
          fontSize: 29.fSize,
          fontFamily: 'Kameron',
          fontWeight: FontWeight.w400,
        ),
        headlineSmall: TextStyle(
          color: appTheme.whiteA70002,
          fontSize: 25.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w400,
        ),
        titleLarge: TextStyle(
          color: appTheme.whiteA70002,
          fontSize: 22.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w400,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0X3F000000),
    primaryContainer: Color(0XFF191A1B),
    secondary: Color(0XFF191A1B),
    secondaryContainer: Color(0X3F000000),
    tertiary: Color(0XFF191A1B),
    tertiaryContainer: Color(0X3F000000),

    // Background colors
    background: Color(0XFF191A1B),

    // Surface colors
    surface: Color(0XFF191A1B),
    surfaceTint: Color(0XFF302929),
    surfaceVariant: Color(0X3F000000),

    // Error colors
    error: Color(0XFF302929),
    errorContainer: Color(0XFF38B3B3),
    onError: Color(0XFFEFEBEB),
    onErrorContainer: Color(0XFF191A1B),

    // On colors(text colors)
    onBackground: Color(0XFF55ADDF),
    onInverseSurface: Color(0XFFEFEBEB),
    onPrimary: Color(0XFF302929),
    onPrimaryContainer: Color(0XFF55ADDF),
    onSecondary: Color(0XFF55ADDF),
    onSecondaryContainer: Color(0XFF302929),
    onTertiary: Color(0XFF55ADDF),
    onTertiaryContainer: Color(0XFF302929),

    // Other colors
    outline: Color(0XFF302929),
    outlineVariant: Color(0XFF191A1B),
    scrim: Color(0XFF191A1B),
    shadow: Color(0XFF302929),

    // Inverse colors
    inversePrimary: Color(0XFF191A1B),
    inverseSurface: Color(0XFF302929),

    // Pending colors
    onSurface: Color(0XFF55ADDF),
    onSurfaceVariant: Color(0XFF302929),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Black
  Color get black900 => Color(0XFF100F0F);
  Color get black90001 => Color(0XFF0F0F10);
  Color get black90002 => Color(0XFF0D0D0E);

  // BlueGray
  Color get blueGray100 => Color(0XFFD9D9D9);
  Color get blueGray10001 => Color(0XFFDCCECE);
  Color get blueGray400 => Color(0XFF888888);
  Color get blueGray700 => Color(0XFF325E59);
  Color get blueGray900 => Color(0XFF2F3332);
  Color get blueGray90001 => Color(0XFF322E2E);
  Color get blueGray90002 => Color(0XFF343535);

  // Cyan
  Color get cyan300 => Color(0XFF4EE8CD);
  Color get cyan400 => Color(0XFF21E6E6);
  Color get cyan40001 => Color(0XFF28B9CD);
  Color get cyan600 => Color(0XFF1AB8B8);

  // Gray
  Color get gray100 => Color(0XFFFAF6F6);
  Color get gray10001 => Color(0XFFF7F3F3);
  Color get gray200 => Color(0XFFF3EEEE);
  Color get gray20001 => Color(0XFFEFECEC);
  Color get gray30044 => Color(0X44E3DFDF);
  Color get gray50 => Color(0XFFFAF7F7);
  Color get gray500 => Color(0XFFB4A9A9);
  Color get gray50001 => Color(0XFFB4A5A5);
  Color get gray50002 => Color(0XFFB3A5A5);
  Color get gray5001 => Color(0XFFFEFAFA);
  Color get gray5002 => Color(0XFFFCFAFA);
  Color get gray600 => Color(0XFF737D7F);
  Color get gray60001 => Color(0XFF777C7A);
  Color get gray60002 => Color(0XFF7F7979);
  Color get gray60003 => Color(0XFF776F6F);
  Color get gray60004 => Color(0XFF6C7072);
  Color get gray700 => Color(0XFF6A6161);
  Color get gray70001 => Color(0XFF5A5353);
  Color get gray800 => Color(0XFF404446);
  Color get gray80001 => Color(0XFF545050);
  Color get gray900 => Color(0XFF141415);
  Color get gray90001 => Color(0XFF121111);
  Color get gray90002 => Color(0XFF131314);
  Color get gray90003 => Color(0XFF141313);
  Color get gray90004 => Color(0XFF2A2424);
  Color get gray90005 => Color(0XFF272616);

  // Green
  Color get green500 => Color(0XFF4B9E62);

  // LightBlue
  Color get lightBlueA200 => Color(0XFF3CD6F8);

  // Pink
  Color get pink800 => Color(0XFF9A3D3D);

  // Red
  Color get red50 => Color(0XFFFCF0F0);
  Color get red5001 => Color(0XFFF9F0F0);
  Color get red800 => Color(0XFFC91F1F);

  // Teal
  Color get teal300 => Color(0XFF509E95);
  Color get teal30001 => Color(0XFF428EAF);

  // White
  Color get whiteA700 => Color(0XFFFFFCFC);
  Color get whiteA70001 => Color(0XFFFFFEFE);
  Color get whiteA70002 => Color(0XFFFFFFFF);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
